/*
 * UserMedia Library
 * http://www.happyworm.com
 *
 * Copyright (c) 2014 Happyworm Ltd
 * Licensed under the MIT license.
 * http://opensource.org/licenses/MIT
 *
 * Author: Mark J Panaghiston
 * Version: 0.0.1
 * Date: 21st May 2014
 *
 * Requires:
 * headtrackr.js (https://github.com/auduno/headtrackr/)
 */

(function(PM) {

	var DEBUG = true;
	var updateId;

	var UserMedia = function(options) {
		this.init(options);
	};

	if(typeof PM === 'undefined') {
		window.UserMedia = UserMedia; // 
	} else {
		PM.UserMedia = function(options) {
			return new UserMedia(options); // 
		};
	}

	UserMedia.prototype = {
		init: function(options) {
			// The default options
			this.options = {
				id: '', // The id of messages being broadcast.
				target: null,
				audio: true,
				video: true,
				width: 400,
				height: 300,
				fps: 15,
				open: true,
				run: true
			};
			// Read in instancing options.
			for(var option in options) {
				if(options.hasOwnProperty(option)) {
					this.options[option] = options[option];
				}
			}
			this.target = typeof this.options.target === 'string' ? document.querySelector(this.options.target) : this.options.target;

			navigator.getUserMedia = navigator.getUserMedia ||
				navigator.webkitGetUserMedia ||
				navigator.mozGetUserMedia ||
				navigator.msGetUserMedia;

			if(this.options.open) {
				this.open();
			}
		},
		broadcast: function(type) {
			// Broadcast the message
			if(PM) {
				PM.broadcast(type, {
					id: this.options.id,
					target: this,
					msg: 'Generated by: UserMedia'
				});
			}
		},
		open: function() {
			var self = this;
			navigator.getUserMedia({
				audio: self.options.audio,
				video: self.options.video
			}, function(stream) {
				self.stream = stream;
				self.success(stream);
				self.broadcast("usermedia");
			}, function(error) {
				self.error = error;
				self.broadcast("usermedia_error");
			});
		},
		success: function(stream) {
			var self = this;
			if(this.target && this.options.video) {
				this.videoElem = document.createElement('video');
				this.videoElem.src = window.URL.createObjectURL(stream);
				this.videoElem.setAttribute("width", this.options.width);
				this.videoElem.setAttribute("height", this.options.height);
				this.videoElem.play();
				// this.target.appendChild(this.videoElem);

				this.cameraCanvas = document.createElement("canvas");
				this.cameraCanvas.setAttribute("width", this.options.width);
				this.cameraCanvas.setAttribute("height", this.options.height);
				this.cameraCanvas.className = 'camera';
				this.cameraContext = this.cameraCanvas.getContext("2d");

				this.overlayCanvas = document.createElement("canvas");
				this.overlayCanvas.setAttribute("width", this.options.width);
				this.overlayCanvas.setAttribute("height", this.options.height);
				this.overlayCanvas.className = 'overlay';
				this.overlayContext = this.overlayCanvas.getContext("2d");

				this.target.appendChild(this.cameraCanvas);
				this.target.appendChild(this.overlayCanvas);

				if(this.options.run) {
					self.update();
				}
			}
		},
		update: function() {
			var self = this;
			// try/catch since video is not available at the start and no (known) other way to test.
			try {
				// Copy video to canvas
				this.cameraContext.drawImage(this.videoElem, 0, 0, this.options.width, this.options.height);
			} catch(err) {}

			clearTimeout(updateId);
			updateId = setTimeout(function() {
				self.update();
			}, 1000 / this.options.fps);

			this.broadcast("usermedia_update");
		}
	};
}(window.PM));
